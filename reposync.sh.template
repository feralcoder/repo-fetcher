#!/bin/bash

if [[ $USER != root ]]; then
  echo "Must be root to run this!"
  exit
fi

CENTOS_BASE_DIR="<<REPOSTORE>>/repos/centos/"
RELEASES="7 8 8-stream"

for RELEASE in $RELEASES; do
   echo; echo "SYNCING $CENTOS_BASE_DIR/$RELEASE/"
   # Start sync if base repo directory exist
   if [[ -d "$CENTOS_BASE_DIR/$RELEASE" ]] ; then
     mkdir -p $CENTOS_BASE_DIR/$RELEASE/isos/x86_64
     # Start Sync
     rsync  --chown=nginx:nginx --chmod=ug=rw,o=r,Dugo+X --perms --exclude 'aarch64' --exclude 'ppc64le' -avSHP --delete rsync://mirror.liquidtelecom.com/centos/$RELEASE/isos/x86_64/ $CENTOS_BASE_DIR/$RELEASE/isos/x86_64/
     rsync  --chown=nginx:nginx --chmod=ug=rw,o=r,Dugo+X --perms --exclude 'aarch64' --exclude 'ppc64le' --exclude 'Source' -avSHP --delete rsync://mirror.liquidtelecom.com/centos/$RELEASE/  $CENTOS_BASE_DIR/$RELEASE/
     # Download CentOS X repository key
     wget -P $CENTOS_BASE_DIR/$RELEASE/ wget https://www.centos.org/keys/RPM-GPG-KEY-CentOS-Official
   else
     echo "Repo directory  $CENTOS_BASE_DIR/$RELEASE does not exist!"
   fi
    if [[ $RELEASE == 7 ]]; then
      rsync  --chown=nginx:nginx --chmod=ug=rw,o=r,Dugo+X --perms --exclude 'aarch64' --exclude 'ppc64le' -avSHP --delete rsync://mirror.liquidtelecom.com/centos-altarch/7/kernel/x86_64/  /repo-store//repos/centos-altarch/7/kernel/x86_64/
    fi
done

DOCKER_BASE_DIR="<<REPOSTORE>>/repos/docker/centos/"
# Release 7 is actually used in kolla-ansible setup on Centos8...
# Don't fetch, for now...
OS_RELEASES="7 8"
FETCH_DIR="<<REPOSTORE>>/fetch-repos/"

for OS_RELEASE in $OS_RELEASES; do
  OSRELEASE_FETCH_DIR=$FETCH_DIR/centos$OS_RELEASE/
  echo; echo "SYNCING $DOCKER_BASE_DIR/$OS_RELEASE/"
  if [[ -d "$DOCKER_BASE_DIR/$OS_RELEASE" ]]; then
      mkdir -p $OSRELEASE_FETCH_DIR
      mkdir -p $DOCKER_BASE_DIR/$OS_RELEASE/x86_64

      reposync -c /etc/yum.repos.d/feralcoder-docker-upstream$OS_RELEASE.repo -a x86_64 --download-metadata -p $OSRELEASE_FETCH_DIR --repo docker-upstream$OS_RELEASE

      [[ -L $DOCKER_BASE_DIR/$OS_RELEASE/x86_64/stable ]] || ln -s $OSRELEASE_FETCH_DIR/docker-upstream$OS_RELEASE $DOCKER_BASE_DIR/$OS_RELEASE/x86_64/stable
      wget https://download.docker.com/linux/centos/gpg -O $DOCKER_BASE_DIR/gpg
   else
      echo "Repo directory  $DOCKER_BASE_DIR/$OS_RELEASE does not exist!"
   fi
done


PUPPET_RELEASES="6 7"
OS_RELEASES="7 8"
FETCH_DIR="<<REPOSTORE>>/fetch-repos/"

for PUPPET_RELEASE in $PUPPET_RELEASES; do
  PUPPET_BASE_DIR="/repo-store/repos/puppet$PUPPET_RELEASE/el/"
  for OS_RELEASE in $OS_RELEASES; do
    OSRELEASE_FETCH_DIR=$FETCH_DIR/centos$OS_RELEASE/
    echo; echo "SYNCING $PUPPET_BASE_DIR/$OS_RELEASE/"
    if [[ -d "$PUPPET_BASE_DIR/$OS_RELEASE" ]]; then
       mkdir -p $OSRELEASE_FETCH_DIR
       mkdir -p $PUPPET_BASE_DIR/$OS_RELEASE/
       # This will hose index.html of other releases, which I think aren't needed...

       # Puppetlabs' own repodata broken, so reposync fails to fetch all.  Amateurs.
       #reposync -c /etc/yum.repos.d/feralcoder-puppet$PUPPET_RELEASE-upstream$OS_RELEASE.repo -a x86_64 --download-metadata -p $OSRELEASE_FETCH_DIR --repo puppet$PUPPET_RELEASE-upstream$OS_RELEASE
       mkdir -p $OSRELEASE_FETCH_DIR/puppet$PUPPET_RELEASE-upstream$OS_RELEASE
       rsync -avH --exclude '.repodata' --exclude 'repodata' rsync://rsync.puppet.com/packages/yum/puppet$PUPPET_RELEASE/el/$OS_RELEASE/x86_64/ $OSRELEASE_FETCH_DIR/puppet$PUPPET_RELEASE-upstream$OS_RELEASE
       rm -rf $OSRELEASE_FETCH_DIR/puppet$PUPPET_RELEASE-upstream$OS_RELEASE/.repodata
       createrepo $OSRELEASE_FETCH_DIR/puppet$PUPPET_RELEASE-upstream$OS_RELEASE

       [[ -L $PUPPET_BASE_DIR/$OS_RELEASE/x86_64 ]] || ln -s $OSRELEASE_FETCH_DIR/puppet$PUPPET_RELEASE-upstream$OS_RELEASE $PUPPET_BASE_DIR/$OS_RELEASE/x86_64
     else
       echo "Repo directory  $PUPPET_BASE_DIR/$OS_RELEASE does not exist!"
     fi
  done
done


MARIADB_BASE_DIR="<<REPOSTORE>>/repos/MariaDB/"
MARIADB_FETCH_DIR="<<REPOSTORE>>/fetch-repos/mariadb-upstream/"
OS_RELEASES="8"

fetch_repo () {
      echo; echo "FETCHING $REPO_FETCH_DIR/$OSRELEASE_ARCH_DIR"

      mkdir -p $REPO_FETCH_DIR
      reposync -c $UPSTREAM_CONFIG -a x86_64 --download-metadata -p $REPO_FETCH_DIR/ --repo $UPSTREAM_NAME

      mkdir -p $REPO_DIR
      # REMOVE LAST DIRECTORY FOR LINKING - will fail after symlink created, it's OK
      rmdir $REPO_DIR
      [[ -L $REPO_DIR ]] || ln -s $REPO_FETCH_DIR/$UPSTREAM_NAME $REPO_DIR
      # wget https://download.docker.com/linux/centos/gpg -O $MARIADB_BASE_DIR/gpg
}

for OS_RELEASE in $OS_RELEASES; do
  OSRELEASE_ARCH_DIR=/rhel/$OS_RELEASE/x86_64
  REPO_FETCH_DIR=$MARIADB_FETCH_DIR/$OSRELEASE_ARCH_DIR
  UPSTREAM_CONFIG=/etc/yum.repos.d/feralcoder-$OS_RELEASE-mariadb-upstream.repo

  if [[ -d "$MARIADB_BASE_DIR" ]] && [[ -d "$MARIADB_FETCH_DIR" ]]; then
      #< baseurl = https://<<REPOIP>>/MariaDB/mariadb-10.5/yum/rhel/8/x86_64
      #> baseurl = https://downloads.mariadb.com/MariaDB/mariadb-10.5/yum/rhel/8/x86_64
      UPSTREAM_NAME=mariadb-main-upstream$OS_RELEASE
      REPO_DIR=$MARIADB_BASE_DIR/mariadb-10.5/yum/$OSRELEASE_ARCH_DIR
      fetch_repo

      #< baseurl = https://<<REPOIP>>/MariaDB/maxscale/latest/yum/rhel/8/x86_64
      #> baseurl = https://dlm.mariadb.com/repo/maxscale/latest/yum/rhel/8/x86_64
      UPSTREAM_NAME=mariadb-maxscale-upstream$OS_RELEASE
      REPO_DIR=$MARIADB_BASE_DIR/maxscale/latest/yum/$OSRELEASE_ARCH_DIR
      fetch_repo

      #< baseurl = https://<<REPOIP>>/MariaDB/Tools/rhel/8/x86_64
      #> baseurl = https://downloads.mariadb.com/Tools/rhel/8/x86_64
      UPSTREAM_NAME=mariadb-tools-upstream$OS_RELEASE
      REPO_DIR=$MARIADB_BASE_DIR/Tools/$OSRELEASE_ARCH_DIR
      fetch_repo
   else
      echo "Repo directory $MARIADB_BASE_DIR or fetch directory $MARIADB_FETCH_DIR does not exist!"
   fi
done

#[mariadb-main-upstream8]
#[mariadb-maxscale-upstream8]
#[mariadb-tools-upstream8]

